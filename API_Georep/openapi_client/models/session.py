# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Session(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'master_volume_id': 'str',
        'remote_volume_id': 'str',
        'master_volume': 'str',
        'remote_user': 'str',
        'remote_hosts': 'list[Remotehost]',
        'remote_volume': 'str',
        'monitor_status': 'str',
        'workers': 'list[Worker]',
        'options': 'dict(str, str)'
    }

    attribute_map = {
        'master_volume_id': 'master_volume_id',
        'remote_volume_id': 'remote_volume_id',
        'master_volume': 'master_volume',
        'remote_user': 'remote_user',
        'remote_hosts': 'remote_hosts',
        'remote_volume': 'remote_volume',
        'monitor_status': 'monitor_status',
        'workers': 'workers',
        'options': 'options'
    }

    def __init__(self, master_volume_id=None, remote_volume_id=None, master_volume=None, remote_user=None, remote_hosts=None, remote_volume=None, monitor_status=None, workers=None, options=None):  # noqa: E501
        """Session - a model defined in OpenAPI"""  # noqa: E501

        self._master_volume_id = None
        self._remote_volume_id = None
        self._master_volume = None
        self._remote_user = None
        self._remote_hosts = None
        self._remote_volume = None
        self._monitor_status = None
        self._workers = None
        self._options = None
        self.discriminator = None

        if master_volume_id is not None:
            self.master_volume_id = master_volume_id
        if remote_volume_id is not None:
            self.remote_volume_id = remote_volume_id
        if master_volume is not None:
            self.master_volume = master_volume
        if remote_user is not None:
            self.remote_user = remote_user
        if remote_hosts is not None:
            self.remote_hosts = remote_hosts
        if remote_volume is not None:
            self.remote_volume = remote_volume
        if monitor_status is not None:
            self.monitor_status = monitor_status
        if workers is not None:
            self.workers = workers
        if options is not None:
            self.options = options

    @property
    def master_volume_id(self):
        """Gets the master_volume_id of this Session.  # noqa: E501


        :return: The master_volume_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._master_volume_id

    @master_volume_id.setter
    def master_volume_id(self, master_volume_id):
        """Sets the master_volume_id of this Session.


        :param master_volume_id: The master_volume_id of this Session.  # noqa: E501
        :type: str
        """

        self._master_volume_id = master_volume_id

    @property
    def remote_volume_id(self):
        """Gets the remote_volume_id of this Session.  # noqa: E501


        :return: The remote_volume_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._remote_volume_id

    @remote_volume_id.setter
    def remote_volume_id(self, remote_volume_id):
        """Sets the remote_volume_id of this Session.


        :param remote_volume_id: The remote_volume_id of this Session.  # noqa: E501
        :type: str
        """

        self._remote_volume_id = remote_volume_id

    @property
    def master_volume(self):
        """Gets the master_volume of this Session.  # noqa: E501


        :return: The master_volume of this Session.  # noqa: E501
        :rtype: str
        """
        return self._master_volume

    @master_volume.setter
    def master_volume(self, master_volume):
        """Sets the master_volume of this Session.


        :param master_volume: The master_volume of this Session.  # noqa: E501
        :type: str
        """

        self._master_volume = master_volume

    @property
    def remote_user(self):
        """Gets the remote_user of this Session.  # noqa: E501


        :return: The remote_user of this Session.  # noqa: E501
        :rtype: str
        """
        return self._remote_user

    @remote_user.setter
    def remote_user(self, remote_user):
        """Sets the remote_user of this Session.


        :param remote_user: The remote_user of this Session.  # noqa: E501
        :type: str
        """

        self._remote_user = remote_user

    @property
    def remote_hosts(self):
        """Gets the remote_hosts of this Session.  # noqa: E501


        :return: The remote_hosts of this Session.  # noqa: E501
        :rtype: list[Remotehost]
        """
        return self._remote_hosts

    @remote_hosts.setter
    def remote_hosts(self, remote_hosts):
        """Sets the remote_hosts of this Session.


        :param remote_hosts: The remote_hosts of this Session.  # noqa: E501
        :type: list[Remotehost]
        """

        self._remote_hosts = remote_hosts

    @property
    def remote_volume(self):
        """Gets the remote_volume of this Session.  # noqa: E501


        :return: The remote_volume of this Session.  # noqa: E501
        :rtype: str
        """
        return self._remote_volume

    @remote_volume.setter
    def remote_volume(self, remote_volume):
        """Sets the remote_volume of this Session.


        :param remote_volume: The remote_volume of this Session.  # noqa: E501
        :type: str
        """

        self._remote_volume = remote_volume

    @property
    def monitor_status(self):
        """Gets the monitor_status of this Session.  # noqa: E501


        :return: The monitor_status of this Session.  # noqa: E501
        :rtype: str
        """
        return self._monitor_status

    @monitor_status.setter
    def monitor_status(self, monitor_status):
        """Sets the monitor_status of this Session.


        :param monitor_status: The monitor_status of this Session.  # noqa: E501
        :type: str
        """

        self._monitor_status = monitor_status

    @property
    def workers(self):
        """Gets the workers of this Session.  # noqa: E501


        :return: The workers of this Session.  # noqa: E501
        :rtype: list[Worker]
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this Session.


        :param workers: The workers of this Session.  # noqa: E501
        :type: list[Worker]
        """

        self._workers = workers

    @property
    def options(self):
        """Gets the options of this Session.  # noqa: E501


        :return: The options of this Session.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Session.


        :param options: The options of this Session.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
