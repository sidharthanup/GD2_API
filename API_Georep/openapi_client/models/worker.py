# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Worker(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'master_peer_hostname': 'str',
        'peer_id': 'str',
        'master_brick_path': 'str',
        'master_brick': 'str',
        'worker_status': 'str',
        'last_synced': 'str',
        'last_synced_utc': 'str',
        'last_synced_entry': 'str',
        'remote_peer_hostname': 'str',
        'checkpoint_time': 'str',
        'checkpoint_time_utc': 'str',
        'checkpoint_completed': 'str',
        'checkpoint_completion_time': 'str',
        'checkpoint_completion_time_utc': 'str',
        'meta': 'str',
        'entry': 'str',
        'data': 'str',
        'failures': 'str',
        'crawl_status': 'str'
    }

    attribute_map = {
        'master_peer_hostname': 'master_peer_hostname',
        'peer_id': 'peer_id',
        'master_brick_path': 'master_brick_path',
        'master_brick': 'master_brick',
        'worker_status': 'worker_status',
        'last_synced': 'last_synced',
        'last_synced_utc': 'last_synced_utc',
        'last_synced_entry': 'last_synced_entry',
        'remote_peer_hostname': 'remote_peer_hostname',
        'checkpoint_time': 'checkpoint_time',
        'checkpoint_time_utc': 'checkpoint_time_utc',
        'checkpoint_completed': 'checkpoint_completed',
        'checkpoint_completion_time': 'checkpoint_completion_time',
        'checkpoint_completion_time_utc': 'checkpoint_completion_time_utc',
        'meta': 'meta',
        'entry': 'entry',
        'data': 'data',
        'failures': 'failures',
        'crawl_status': 'crawl_status'
    }

    def __init__(self, master_peer_hostname=None, peer_id=None, master_brick_path=None, master_brick=None, worker_status=None, last_synced=None, last_synced_utc=None, last_synced_entry=None, remote_peer_hostname=None, checkpoint_time=None, checkpoint_time_utc=None, checkpoint_completed=None, checkpoint_completion_time=None, checkpoint_completion_time_utc=None, meta=None, entry=None, data=None, failures=None, crawl_status=None):  # noqa: E501
        """Worker - a model defined in OpenAPI"""  # noqa: E501

        self._master_peer_hostname = None
        self._peer_id = None
        self._master_brick_path = None
        self._master_brick = None
        self._worker_status = None
        self._last_synced = None
        self._last_synced_utc = None
        self._last_synced_entry = None
        self._remote_peer_hostname = None
        self._checkpoint_time = None
        self._checkpoint_time_utc = None
        self._checkpoint_completed = None
        self._checkpoint_completion_time = None
        self._checkpoint_completion_time_utc = None
        self._meta = None
        self._entry = None
        self._data = None
        self._failures = None
        self._crawl_status = None
        self.discriminator = None

        if master_peer_hostname is not None:
            self.master_peer_hostname = master_peer_hostname
        if peer_id is not None:
            self.peer_id = peer_id
        if master_brick_path is not None:
            self.master_brick_path = master_brick_path
        if master_brick is not None:
            self.master_brick = master_brick
        if worker_status is not None:
            self.worker_status = worker_status
        if last_synced is not None:
            self.last_synced = last_synced
        if last_synced_utc is not None:
            self.last_synced_utc = last_synced_utc
        if last_synced_entry is not None:
            self.last_synced_entry = last_synced_entry
        if remote_peer_hostname is not None:
            self.remote_peer_hostname = remote_peer_hostname
        if checkpoint_time is not None:
            self.checkpoint_time = checkpoint_time
        if checkpoint_time_utc is not None:
            self.checkpoint_time_utc = checkpoint_time_utc
        if checkpoint_completed is not None:
            self.checkpoint_completed = checkpoint_completed
        if checkpoint_completion_time is not None:
            self.checkpoint_completion_time = checkpoint_completion_time
        if checkpoint_completion_time_utc is not None:
            self.checkpoint_completion_time_utc = checkpoint_completion_time_utc
        if meta is not None:
            self.meta = meta
        if entry is not None:
            self.entry = entry
        if data is not None:
            self.data = data
        if failures is not None:
            self.failures = failures
        if crawl_status is not None:
            self.crawl_status = crawl_status

    @property
    def master_peer_hostname(self):
        """Gets the master_peer_hostname of this Worker.  # noqa: E501


        :return: The master_peer_hostname of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._master_peer_hostname

    @master_peer_hostname.setter
    def master_peer_hostname(self, master_peer_hostname):
        """Sets the master_peer_hostname of this Worker.


        :param master_peer_hostname: The master_peer_hostname of this Worker.  # noqa: E501
        :type: str
        """

        self._master_peer_hostname = master_peer_hostname

    @property
    def peer_id(self):
        """Gets the peer_id of this Worker.  # noqa: E501


        :return: The peer_id of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this Worker.


        :param peer_id: The peer_id of this Worker.  # noqa: E501
        :type: str
        """

        self._peer_id = peer_id

    @property
    def master_brick_path(self):
        """Gets the master_brick_path of this Worker.  # noqa: E501


        :return: The master_brick_path of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._master_brick_path

    @master_brick_path.setter
    def master_brick_path(self, master_brick_path):
        """Sets the master_brick_path of this Worker.


        :param master_brick_path: The master_brick_path of this Worker.  # noqa: E501
        :type: str
        """

        self._master_brick_path = master_brick_path

    @property
    def master_brick(self):
        """Gets the master_brick of this Worker.  # noqa: E501


        :return: The master_brick of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._master_brick

    @master_brick.setter
    def master_brick(self, master_brick):
        """Sets the master_brick of this Worker.


        :param master_brick: The master_brick of this Worker.  # noqa: E501
        :type: str
        """

        self._master_brick = master_brick

    @property
    def worker_status(self):
        """Gets the worker_status of this Worker.  # noqa: E501


        :return: The worker_status of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._worker_status

    @worker_status.setter
    def worker_status(self, worker_status):
        """Sets the worker_status of this Worker.


        :param worker_status: The worker_status of this Worker.  # noqa: E501
        :type: str
        """

        self._worker_status = worker_status

    @property
    def last_synced(self):
        """Gets the last_synced of this Worker.  # noqa: E501


        :return: The last_synced of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._last_synced

    @last_synced.setter
    def last_synced(self, last_synced):
        """Sets the last_synced of this Worker.


        :param last_synced: The last_synced of this Worker.  # noqa: E501
        :type: str
        """

        self._last_synced = last_synced

    @property
    def last_synced_utc(self):
        """Gets the last_synced_utc of this Worker.  # noqa: E501


        :return: The last_synced_utc of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._last_synced_utc

    @last_synced_utc.setter
    def last_synced_utc(self, last_synced_utc):
        """Sets the last_synced_utc of this Worker.


        :param last_synced_utc: The last_synced_utc of this Worker.  # noqa: E501
        :type: str
        """

        self._last_synced_utc = last_synced_utc

    @property
    def last_synced_entry(self):
        """Gets the last_synced_entry of this Worker.  # noqa: E501


        :return: The last_synced_entry of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._last_synced_entry

    @last_synced_entry.setter
    def last_synced_entry(self, last_synced_entry):
        """Sets the last_synced_entry of this Worker.


        :param last_synced_entry: The last_synced_entry of this Worker.  # noqa: E501
        :type: str
        """

        self._last_synced_entry = last_synced_entry

    @property
    def remote_peer_hostname(self):
        """Gets the remote_peer_hostname of this Worker.  # noqa: E501


        :return: The remote_peer_hostname of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._remote_peer_hostname

    @remote_peer_hostname.setter
    def remote_peer_hostname(self, remote_peer_hostname):
        """Sets the remote_peer_hostname of this Worker.


        :param remote_peer_hostname: The remote_peer_hostname of this Worker.  # noqa: E501
        :type: str
        """

        self._remote_peer_hostname = remote_peer_hostname

    @property
    def checkpoint_time(self):
        """Gets the checkpoint_time of this Worker.  # noqa: E501


        :return: The checkpoint_time of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint_time

    @checkpoint_time.setter
    def checkpoint_time(self, checkpoint_time):
        """Sets the checkpoint_time of this Worker.


        :param checkpoint_time: The checkpoint_time of this Worker.  # noqa: E501
        :type: str
        """

        self._checkpoint_time = checkpoint_time

    @property
    def checkpoint_time_utc(self):
        """Gets the checkpoint_time_utc of this Worker.  # noqa: E501


        :return: The checkpoint_time_utc of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint_time_utc

    @checkpoint_time_utc.setter
    def checkpoint_time_utc(self, checkpoint_time_utc):
        """Sets the checkpoint_time_utc of this Worker.


        :param checkpoint_time_utc: The checkpoint_time_utc of this Worker.  # noqa: E501
        :type: str
        """

        self._checkpoint_time_utc = checkpoint_time_utc

    @property
    def checkpoint_completed(self):
        """Gets the checkpoint_completed of this Worker.  # noqa: E501


        :return: The checkpoint_completed of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint_completed

    @checkpoint_completed.setter
    def checkpoint_completed(self, checkpoint_completed):
        """Sets the checkpoint_completed of this Worker.


        :param checkpoint_completed: The checkpoint_completed of this Worker.  # noqa: E501
        :type: str
        """

        self._checkpoint_completed = checkpoint_completed

    @property
    def checkpoint_completion_time(self):
        """Gets the checkpoint_completion_time of this Worker.  # noqa: E501


        :return: The checkpoint_completion_time of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint_completion_time

    @checkpoint_completion_time.setter
    def checkpoint_completion_time(self, checkpoint_completion_time):
        """Sets the checkpoint_completion_time of this Worker.


        :param checkpoint_completion_time: The checkpoint_completion_time of this Worker.  # noqa: E501
        :type: str
        """

        self._checkpoint_completion_time = checkpoint_completion_time

    @property
    def checkpoint_completion_time_utc(self):
        """Gets the checkpoint_completion_time_utc of this Worker.  # noqa: E501


        :return: The checkpoint_completion_time_utc of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._checkpoint_completion_time_utc

    @checkpoint_completion_time_utc.setter
    def checkpoint_completion_time_utc(self, checkpoint_completion_time_utc):
        """Sets the checkpoint_completion_time_utc of this Worker.


        :param checkpoint_completion_time_utc: The checkpoint_completion_time_utc of this Worker.  # noqa: E501
        :type: str
        """

        self._checkpoint_completion_time_utc = checkpoint_completion_time_utc

    @property
    def meta(self):
        """Gets the meta of this Worker.  # noqa: E501


        :return: The meta of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Worker.


        :param meta: The meta of this Worker.  # noqa: E501
        :type: str
        """

        self._meta = meta

    @property
    def entry(self):
        """Gets the entry of this Worker.  # noqa: E501


        :return: The entry of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this Worker.


        :param entry: The entry of this Worker.  # noqa: E501
        :type: str
        """

        self._entry = entry

    @property
    def data(self):
        """Gets the data of this Worker.  # noqa: E501


        :return: The data of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Worker.


        :param data: The data of this Worker.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def failures(self):
        """Gets the failures of this Worker.  # noqa: E501


        :return: The failures of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this Worker.


        :param failures: The failures of this Worker.  # noqa: E501
        :type: str
        """

        self._failures = failures

    @property
    def crawl_status(self):
        """Gets the crawl_status of this Worker.  # noqa: E501


        :return: The crawl_status of this Worker.  # noqa: E501
        :rtype: str
        """
        return self._crawl_status

    @crawl_status.setter
    def crawl_status(self, crawl_status):
        """Sets the crawl_status of this Worker.


        :param crawl_status: The crawl_status of this Worker.  # noqa: E501
        :type: str
        """

        self._crawl_status = crawl_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Worker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
