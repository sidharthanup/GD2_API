# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def geo_replication_config_get(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_get(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: OptionResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_config_get_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_config_get_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_config_get_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_get_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: OptionResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_config_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_config_get`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptionResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_config_reset(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_reset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_reset(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_config_reset_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_config_reset_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_config_reset_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_reset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_reset_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_config_reset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_config_reset`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_config_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_config_set(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_set(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Option option:
        :return: OptionResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_config_set_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_config_set_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_config_set_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_config_set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_config_set_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Option option:
        :return: OptionResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'option']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_config_set" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_config_set`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_config_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'option' in local_var_params:
            body_params = local_var_params['option']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptionResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_create(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_create(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Create create:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_create_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_create_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_create_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_create_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Create create:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_create`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create' in local_var_params:
            body_params = local_var_params['create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_delete(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_delete(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_delete_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_delete_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_delete_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_delete_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_delete`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_pause(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_pause  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_pause(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Pause pause:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_pause_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_pause_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_pause_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_pause  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_pause_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Pause pause:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'pause']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_pause" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_pause`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_pause`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pause' in local_var_params:
            body_params = local_var_params['pause']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_resume(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_resume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_resume(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Resume resume:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_resume_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_resume_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_resume_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_resume  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_resume_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Resume resume:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'resume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_resume" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_resume`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_resume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resume' in local_var_params:
            body_params = local_var_params['resume']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_ssh_key_generate(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_generate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_generate(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :return: SshPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_ssh_key_generate_with_http_info(volname, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_ssh_key_generate_with_http_info(volname, **kwargs)  # noqa: E501
            return data

    def geo_replication_ssh_key_generate_with_http_info(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_generate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_generate_with_http_info(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :return: SshPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['volname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_ssh_key_generate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'volname' is set
        if ('volname' not in local_var_params or
                local_var_params['volname'] is None):
            raise ValueError("Missing the required parameter `volname` when calling `geo_replication_ssh_key_generate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volname' in local_var_params:
            path_params['volname'] = local_var_params['volname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ssh-key/{volname}/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SshPublicKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_ssh_key_get(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_get(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :return: SshPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_ssh_key_get_with_http_info(volname, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_ssh_key_get_with_http_info(volname, **kwargs)  # noqa: E501
            return data

    def geo_replication_ssh_key_get_with_http_info(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_get_with_http_info(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :return: SshPublicKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['volname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_ssh_key_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'volname' is set
        if ('volname' not in local_var_params or
                local_var_params['volname'] is None):
            raise ValueError("Missing the required parameter `volname` when calling `geo_replication_ssh_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volname' in local_var_params:
            path_params['volname'] = local_var_params['volname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ssh-key/{volname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SshPublicKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_ssh_key_push(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_push  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_push(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :param SshPublicKey2 ssh_public_key2:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_ssh_key_push_with_http_info(volname, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_ssh_key_push_with_http_info(volname, **kwargs)  # noqa: E501
            return data

    def geo_replication_ssh_key_push_with_http_info(self, volname, **kwargs):  # noqa: E501
        """geo_replication_ssh_key_push  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_ssh_key_push_with_http_info(volname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volname: (required)
        :param SshPublicKey2 ssh_public_key2:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['volname', 'ssh_public_key2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_ssh_key_push" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'volname' is set
        if ('volname' not in local_var_params or
                local_var_params['volname'] is None):
            raise ValueError("Missing the required parameter `volname` when calling `geo_replication_ssh_key_push`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volname' in local_var_params:
            path_params['volname'] = local_var_params['volname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ssh_public_key2' in local_var_params:
            body_params = local_var_params['ssh_public_key2']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ssh-key/{volname}/push', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_start(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_start(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Start start:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_start_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_start_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_start_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_start_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Start start:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'start']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_start" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_start`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start' in local_var_params:
            body_params = local_var_params['start']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_status(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_status(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_status_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_status_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_status_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_status_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_status`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_status_list(self, **kwargs):  # noqa: E501
        """geo_replication_status_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_status_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_status_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def geo_replication_status_list_with_http_info(self, **kwargs):  # noqa: E501
        """geo_replication_status_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_status_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def geo_replication_stop(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_stop(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Stop stop:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.geo_replication_stop_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
        else:
            (data) = self.geo_replication_stop_with_http_info(mastervolid, remotevolid, **kwargs)  # noqa: E501
            return data

    def geo_replication_stop_with_http_info(self, mastervolid, remotevolid, **kwargs):  # noqa: E501
        """geo_replication_stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.geo_replication_stop_with_http_info(mastervolid, remotevolid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mastervolid: (required)
        :param str remotevolid: (required)
        :param Stop stop:
        :return: Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mastervolid', 'remotevolid', 'stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geo_replication_stop" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mastervolid' is set
        if ('mastervolid' not in local_var_params or
                local_var_params['mastervolid'] is None):
            raise ValueError("Missing the required parameter `mastervolid` when calling `geo_replication_stop`")  # noqa: E501
        # verify the required parameter 'remotevolid' is set
        if ('remotevolid' not in local_var_params or
                local_var_params['remotevolid'] is None):
            raise ValueError("Missing the required parameter `remotevolid` when calling `geo_replication_stop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mastervolid' in local_var_params:
            path_params['mastervolid'] = local_var_params['mastervolid']  # noqa: E501
        if 'remotevolid' in local_var_params:
            path_params['remotevolid'] = local_var_params['remotevolid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stop' in local_var_params:
            body_params = local_var_params['stop']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/geo-replication/{mastervolid}/{remotevolid}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Session',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
