# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Volume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'transport': 'str',
        'distribute_count': 'int',
        'replica_count': 'int',
        'arbiter_count': 'int',
        'options': 'object',
        'state': 'str',
        'subvols': 'list[Subvol]',
        'metadata': 'object',
        'snap_list': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'transport': 'transport',
        'distribute_count': 'distribute-count',
        'replica_count': 'replica-count',
        'arbiter_count': 'arbiter-count',
        'options': 'options',
        'state': 'state',
        'subvols': 'subvols',
        'metadata': 'metadata',
        'snap_list': 'snap-list'
    }

    def __init__(self, id=None, name=None, type=None, transport=None, distribute_count=None, replica_count=None, arbiter_count=None, options=None, state=None, subvols=None, metadata=None, snap_list=None):  # noqa: E501
        """Volume - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._transport = None
        self._distribute_count = None
        self._replica_count = None
        self._arbiter_count = None
        self._options = None
        self._state = None
        self._subvols = None
        self._metadata = None
        self._snap_list = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if transport is not None:
            self.transport = transport
        if distribute_count is not None:
            self.distribute_count = distribute_count
        if replica_count is not None:
            self.replica_count = replica_count
        if arbiter_count is not None:
            self.arbiter_count = arbiter_count
        if options is not None:
            self.options = options
        if state is not None:
            self.state = state
        if subvols is not None:
            self.subvols = subvols
        if metadata is not None:
            self.metadata = metadata
        if snap_list is not None:
            self.snap_list = snap_list

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501


        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Volume.  # noqa: E501


        :return: The type of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Volume.


        :param type: The type of this Volume.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def transport(self):
        """Gets the transport of this Volume.  # noqa: E501


        :return: The transport of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this Volume.


        :param transport: The transport of this Volume.  # noqa: E501
        :type: str
        """

        self._transport = transport

    @property
    def distribute_count(self):
        """Gets the distribute_count of this Volume.  # noqa: E501


        :return: The distribute_count of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._distribute_count

    @distribute_count.setter
    def distribute_count(self, distribute_count):
        """Sets the distribute_count of this Volume.


        :param distribute_count: The distribute_count of this Volume.  # noqa: E501
        :type: int
        """

        self._distribute_count = distribute_count

    @property
    def replica_count(self):
        """Gets the replica_count of this Volume.  # noqa: E501


        :return: The replica_count of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this Volume.


        :param replica_count: The replica_count of this Volume.  # noqa: E501
        :type: int
        """

        self._replica_count = replica_count

    @property
    def arbiter_count(self):
        """Gets the arbiter_count of this Volume.  # noqa: E501


        :return: The arbiter_count of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._arbiter_count

    @arbiter_count.setter
    def arbiter_count(self, arbiter_count):
        """Sets the arbiter_count of this Volume.


        :param arbiter_count: The arbiter_count of this Volume.  # noqa: E501
        :type: int
        """

        self._arbiter_count = arbiter_count

    @property
    def options(self):
        """Gets the options of this Volume.  # noqa: E501


        :return: The options of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Volume.


        :param options: The options of this Volume.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def state(self):
        """Gets the state of this Volume.  # noqa: E501


        :return: The state of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.


        :param state: The state of this Volume.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def subvols(self):
        """Gets the subvols of this Volume.  # noqa: E501


        :return: The subvols of this Volume.  # noqa: E501
        :rtype: list[Subvol]
        """
        return self._subvols

    @subvols.setter
    def subvols(self, subvols):
        """Sets the subvols of this Volume.


        :param subvols: The subvols of this Volume.  # noqa: E501
        :type: list[Subvol]
        """

        self._subvols = subvols

    @property
    def metadata(self):
        """Gets the metadata of this Volume.  # noqa: E501


        :return: The metadata of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Volume.


        :param metadata: The metadata of this Volume.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def snap_list(self):
        """Gets the snap_list of this Volume.  # noqa: E501


        :return: The snap_list of this Volume.  # noqa: E501
        :rtype: list[str]
        """
        return self._snap_list

    @snap_list.setter
    def snap_list(self, snap_list):
        """Sets the snap_list of this Volume.


        :param snap_list: The snap_list of this Volume.  # noqa: E501
        :type: list[str]
        """

        self._snap_list = snap_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
