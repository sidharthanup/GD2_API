# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Brick2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'path': 'str',
        'volume_id': 'str',
        'volume_name': 'str',
        'peer_id': 'str',
        'host': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'path': 'path',
        'volume_id': 'volume-id',
        'volume_name': 'volume-name',
        'peer_id': 'peer-id',
        'host': 'host',
        'type': 'type'
    }

    def __init__(self, id=None, path=None, volume_id=None, volume_name=None, peer_id=None, host=None, type=None):  # noqa: E501
        """Brick2 - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._path = None
        self._volume_id = None
        self._volume_name = None
        self._peer_id = None
        self._host = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if volume_id is not None:
            self.volume_id = volume_id
        if volume_name is not None:
            self.volume_name = volume_name
        if peer_id is not None:
            self.peer_id = peer_id
        if host is not None:
            self.host = host
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this Brick2.  # noqa: E501


        :return: The id of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Brick2.


        :param id: The id of this Brick2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this Brick2.  # noqa: E501


        :return: The path of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Brick2.


        :param path: The path of this Brick2.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def volume_id(self):
        """Gets the volume_id of this Brick2.  # noqa: E501


        :return: The volume_id of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this Brick2.


        :param volume_id: The volume_id of this Brick2.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def volume_name(self):
        """Gets the volume_name of this Brick2.  # noqa: E501


        :return: The volume_name of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this Brick2.


        :param volume_name: The volume_name of this Brick2.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def peer_id(self):
        """Gets the peer_id of this Brick2.  # noqa: E501


        :return: The peer_id of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this Brick2.


        :param peer_id: The peer_id of this Brick2.  # noqa: E501
        :type: str
        """

        self._peer_id = peer_id

    @property
    def host(self):
        """Gets the host of this Brick2.  # noqa: E501


        :return: The host of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Brick2.


        :param host: The host of this Brick2.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def type(self):
        """Gets the type of this Brick2.  # noqa: E501


        :return: The type of this Brick2.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Brick2.


        :param type: The type of this Brick2.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Brick2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
