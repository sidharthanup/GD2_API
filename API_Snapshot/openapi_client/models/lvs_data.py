# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LvsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vgname': 'str',
        'datapercentage': 'float',
        'lvsize': 'str',
        'pool_lv': 'str'
    }

    attribute_map = {
        'vgname': 'vgname',
        'datapercentage': 'datapercentage',
        'lvsize': 'lvsize',
        'pool_lv': 'pool-lv'
    }

    def __init__(self, vgname=None, datapercentage=None, lvsize=None, pool_lv=None):  # noqa: E501
        """LvsData - a model defined in OpenAPI"""  # noqa: E501

        self._vgname = None
        self._datapercentage = None
        self._lvsize = None
        self._pool_lv = None
        self.discriminator = None

        if vgname is not None:
            self.vgname = vgname
        if datapercentage is not None:
            self.datapercentage = datapercentage
        if lvsize is not None:
            self.lvsize = lvsize
        if pool_lv is not None:
            self.pool_lv = pool_lv

    @property
    def vgname(self):
        """Gets the vgname of this LvsData.  # noqa: E501


        :return: The vgname of this LvsData.  # noqa: E501
        :rtype: str
        """
        return self._vgname

    @vgname.setter
    def vgname(self, vgname):
        """Sets the vgname of this LvsData.


        :param vgname: The vgname of this LvsData.  # noqa: E501
        :type: str
        """

        self._vgname = vgname

    @property
    def datapercentage(self):
        """Gets the datapercentage of this LvsData.  # noqa: E501


        :return: The datapercentage of this LvsData.  # noqa: E501
        :rtype: float
        """
        return self._datapercentage

    @datapercentage.setter
    def datapercentage(self, datapercentage):
        """Sets the datapercentage of this LvsData.


        :param datapercentage: The datapercentage of this LvsData.  # noqa: E501
        :type: float
        """

        self._datapercentage = datapercentage

    @property
    def lvsize(self):
        """Gets the lvsize of this LvsData.  # noqa: E501


        :return: The lvsize of this LvsData.  # noqa: E501
        :rtype: str
        """
        return self._lvsize

    @lvsize.setter
    def lvsize(self, lvsize):
        """Sets the lvsize of this LvsData.


        :param lvsize: The lvsize of this LvsData.  # noqa: E501
        :type: str
        """

        self._lvsize = lvsize

    @property
    def pool_lv(self):
        """Gets the pool_lv of this LvsData.  # noqa: E501


        :return: The pool_lv of this LvsData.  # noqa: E501
        :rtype: str
        """
        return self._pool_lv

    @pool_lv.setter
    def pool_lv(self, pool_lv):
        """Sets the pool_lv of this LvsData.


        :param pool_lv: The pool_lv of this LvsData.  # noqa: E501
        :type: str
        """

        self._pool_lv = pool_lv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LvsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
