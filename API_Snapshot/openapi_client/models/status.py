# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Status(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parentname': 'str',
        'snaps': 'str',
        'id': 'str',
        'snapbrickstatus': 'list[SnapBrickStatus]'
    }

    attribute_map = {
        'parentname': 'parentname',
        'snaps': 'snaps',
        'id': 'id',
        'snapbrickstatus': 'snapbrickstatus'
    }

    def __init__(self, parentname=None, snaps=None, id=None, snapbrickstatus=None):  # noqa: E501
        """Status - a model defined in OpenAPI"""  # noqa: E501

        self._parentname = None
        self._snaps = None
        self._id = None
        self._snapbrickstatus = None
        self.discriminator = None

        if parentname is not None:
            self.parentname = parentname
        if snaps is not None:
            self.snaps = snaps
        if id is not None:
            self.id = id
        if snapbrickstatus is not None:
            self.snapbrickstatus = snapbrickstatus

    @property
    def parentname(self):
        """Gets the parentname of this Status.  # noqa: E501


        :return: The parentname of this Status.  # noqa: E501
        :rtype: str
        """
        return self._parentname

    @parentname.setter
    def parentname(self, parentname):
        """Sets the parentname of this Status.


        :param parentname: The parentname of this Status.  # noqa: E501
        :type: str
        """

        self._parentname = parentname

    @property
    def snaps(self):
        """Gets the snaps of this Status.  # noqa: E501


        :return: The snaps of this Status.  # noqa: E501
        :rtype: str
        """
        return self._snaps

    @snaps.setter
    def snaps(self, snaps):
        """Sets the snaps of this Status.


        :param snaps: The snaps of this Status.  # noqa: E501
        :type: str
        """

        self._snaps = snaps

    @property
    def id(self):
        """Gets the id of this Status.  # noqa: E501


        :return: The id of this Status.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Status.


        :param id: The id of this Status.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def snapbrickstatus(self):
        """Gets the snapbrickstatus of this Status.  # noqa: E501


        :return: The snapbrickstatus of this Status.  # noqa: E501
        :rtype: list[SnapBrickStatus]
        """
        return self._snapbrickstatus

    @snapbrickstatus.setter
    def snapbrickstatus(self, snapbrickstatus):
        """Sets the snapbrickstatus of this Status.


        :param snapbrickstatus: The snapbrickstatus of this Status.  # noqa: E501
        :type: list[SnapBrickStatus]
        """

        self._snapbrickstatus = snapbrickstatus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
