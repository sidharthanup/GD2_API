# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BrickStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'info': 'Brick',
        'online': 'bool',
        'pid': 'int',
        'port': 'int',
        'fs_type': 'str',
        'mount_ops': 'str',
        'device': 'str',
        'size': 'SizeInfo'
    }

    attribute_map = {
        'info': 'info',
        'online': 'online',
        'pid': 'pid',
        'port': 'port',
        'fs_type': 'fs-type',
        'mount_ops': 'mount-ops',
        'device': 'device',
        'size': 'size'
    }

    def __init__(self, info=None, online=None, pid=None, port=None, fs_type=None, mount_ops=None, device=None, size=None):  # noqa: E501
        """BrickStatus - a model defined in OpenAPI"""  # noqa: E501

        self._info = None
        self._online = None
        self._pid = None
        self._port = None
        self._fs_type = None
        self._mount_ops = None
        self._device = None
        self._size = None
        self.discriminator = None

        if info is not None:
            self.info = info
        if online is not None:
            self.online = online
        if pid is not None:
            self.pid = pid
        if port is not None:
            self.port = port
        if fs_type is not None:
            self.fs_type = fs_type
        if mount_ops is not None:
            self.mount_ops = mount_ops
        if device is not None:
            self.device = device
        if size is not None:
            self.size = size

    @property
    def info(self):
        """Gets the info of this BrickStatus.  # noqa: E501


        :return: The info of this BrickStatus.  # noqa: E501
        :rtype: Brick
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this BrickStatus.


        :param info: The info of this BrickStatus.  # noqa: E501
        :type: Brick
        """

        self._info = info

    @property
    def online(self):
        """Gets the online of this BrickStatus.  # noqa: E501


        :return: The online of this BrickStatus.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this BrickStatus.


        :param online: The online of this BrickStatus.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def pid(self):
        """Gets the pid of this BrickStatus.  # noqa: E501


        :return: The pid of this BrickStatus.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this BrickStatus.


        :param pid: The pid of this BrickStatus.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def port(self):
        """Gets the port of this BrickStatus.  # noqa: E501


        :return: The port of this BrickStatus.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this BrickStatus.


        :param port: The port of this BrickStatus.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def fs_type(self):
        """Gets the fs_type of this BrickStatus.  # noqa: E501


        :return: The fs_type of this BrickStatus.  # noqa: E501
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type):
        """Sets the fs_type of this BrickStatus.


        :param fs_type: The fs_type of this BrickStatus.  # noqa: E501
        :type: str
        """

        self._fs_type = fs_type

    @property
    def mount_ops(self):
        """Gets the mount_ops of this BrickStatus.  # noqa: E501


        :return: The mount_ops of this BrickStatus.  # noqa: E501
        :rtype: str
        """
        return self._mount_ops

    @mount_ops.setter
    def mount_ops(self, mount_ops):
        """Sets the mount_ops of this BrickStatus.


        :param mount_ops: The mount_ops of this BrickStatus.  # noqa: E501
        :type: str
        """

        self._mount_ops = mount_ops

    @property
    def device(self):
        """Gets the device of this BrickStatus.  # noqa: E501


        :return: The device of this BrickStatus.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this BrickStatus.


        :param device: The device of this BrickStatus.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def size(self):
        """Gets the size of this BrickStatus.  # noqa: E501


        :return: The size of this BrickStatus.  # noqa: E501
        :rtype: SizeInfo
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BrickStatus.


        :param size: The size of this BrickStatus.  # noqa: E501
        :type: SizeInfo
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrickStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
