# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Peer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'peer_addresses': 'list[str]',
        'client_addresses': 'list[str]',
        'online': 'bool',
        'pid': 'int',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'peer_addresses': 'peer-addresses',
        'client_addresses': 'client-addresses',
        'online': 'online',
        'pid': 'pid',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, name=None, peer_addresses=None, client_addresses=None, online=None, pid=None, metadata=None):  # noqa: E501
        """Peer - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._peer_addresses = None
        self._client_addresses = None
        self._online = None
        self._pid = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if peer_addresses is not None:
            self.peer_addresses = peer_addresses
        if client_addresses is not None:
            self.client_addresses = client_addresses
        if online is not None:
            self.online = online
        if pid is not None:
            self.pid = pid
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Peer.  # noqa: E501


        :return: The id of this Peer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Peer.


        :param id: The id of this Peer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Peer.  # noqa: E501


        :return: The name of this Peer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Peer.


        :param name: The name of this Peer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def peer_addresses(self):
        """Gets the peer_addresses of this Peer.  # noqa: E501


        :return: The peer_addresses of this Peer.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_addresses

    @peer_addresses.setter
    def peer_addresses(self, peer_addresses):
        """Sets the peer_addresses of this Peer.


        :param peer_addresses: The peer_addresses of this Peer.  # noqa: E501
        :type: list[str]
        """

        self._peer_addresses = peer_addresses

    @property
    def client_addresses(self):
        """Gets the client_addresses of this Peer.  # noqa: E501


        :return: The client_addresses of this Peer.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_addresses

    @client_addresses.setter
    def client_addresses(self, client_addresses):
        """Sets the client_addresses of this Peer.


        :param client_addresses: The client_addresses of this Peer.  # noqa: E501
        :type: list[str]
        """

        self._client_addresses = client_addresses

    @property
    def online(self):
        """Gets the online of this Peer.  # noqa: E501


        :return: The online of this Peer.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this Peer.


        :param online: The online of this Peer.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def pid(self):
        """Gets the pid of this Peer.  # noqa: E501


        :return: The pid of this Peer.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Peer.


        :param pid: The pid of this Peer.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def metadata(self):
        """Gets the metadata of this Peer.  # noqa: E501


        :return: The metadata of this Peer.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Peer.


        :param metadata: The metadata of this Peer.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Peer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
