# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Manual(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'transport': 'str',
        'force': 'bool',
        'subvols': 'list[object]',
        'options': 'object',
        'advanced': 'bool',
        'experimental': 'bool',
        'deprecated': 'bool',
        'metadata': 'object',
        'flags': 'object'
    }

    attribute_map = {
        'name': 'name',
        'transport': 'transport',
        'force': 'force',
        'subvols': 'subvols',
        'options': 'options',
        'advanced': 'advanced',
        'experimental': 'experimental',
        'deprecated': 'deprecated',
        'metadata': 'metadata',
        'flags': 'flags'
    }

    def __init__(self, name=None, transport=None, force=None, subvols=None, options=None, advanced=None, experimental=None, deprecated=None, metadata=None, flags=None):  # noqa: E501
        """Manual - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._transport = None
        self._force = None
        self._subvols = None
        self._options = None
        self._advanced = None
        self._experimental = None
        self._deprecated = None
        self._metadata = None
        self._flags = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if transport is not None:
            self.transport = transport
        if force is not None:
            self.force = force
        if subvols is not None:
            self.subvols = subvols
        if options is not None:
            self.options = options
        if advanced is not None:
            self.advanced = advanced
        if experimental is not None:
            self.experimental = experimental
        if deprecated is not None:
            self.deprecated = deprecated
        if metadata is not None:
            self.metadata = metadata
        if flags is not None:
            self.flags = flags

    @property
    def name(self):
        """Gets the name of this Manual.  # noqa: E501

        Volume Name  # noqa: E501

        :return: The name of this Manual.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Manual.

        Volume Name  # noqa: E501

        :param name: The name of this Manual.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def transport(self):
        """Gets the transport of this Manual.  # noqa: E501

        Transport Type  # noqa: E501

        :return: The transport of this Manual.  # noqa: E501
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this Manual.

        Transport Type  # noqa: E501

        :param transport: The transport of this Manual.  # noqa: E501
        :type: str
        """

        self._transport = transport

    @property
    def force(self):
        """Gets the force of this Manual.  # noqa: E501

        Force  # noqa: E501

        :return: The force of this Manual.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this Manual.

        Force  # noqa: E501

        :param force: The force of this Manual.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def subvols(self):
        """Gets the subvols of this Manual.  # noqa: E501

        List of sub volumes  # noqa: E501

        :return: The subvols of this Manual.  # noqa: E501
        :rtype: list[object]
        """
        return self._subvols

    @subvols.setter
    def subvols(self, subvols):
        """Sets the subvols of this Manual.

        List of sub volumes  # noqa: E501

        :param subvols: The subvols of this Manual.  # noqa: E501
        :type: list[object]
        """

        self._subvols = subvols

    @property
    def options(self):
        """Gets the options of this Manual.  # noqa: E501

        Options to be configured  # noqa: E501

        :return: The options of this Manual.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Manual.

        Options to be configured  # noqa: E501

        :param options: The options of this Manual.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def advanced(self):
        """Gets the advanced of this Manual.  # noqa: E501

        Allow setting advanced options  # noqa: E501

        :return: The advanced of this Manual.  # noqa: E501
        :rtype: bool
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this Manual.

        Allow setting advanced options  # noqa: E501

        :param advanced: The advanced of this Manual.  # noqa: E501
        :type: bool
        """

        self._advanced = advanced

    @property
    def experimental(self):
        """Gets the experimental of this Manual.  # noqa: E501

        Allow setting experimental options  # noqa: E501

        :return: The experimental of this Manual.  # noqa: E501
        :rtype: bool
        """
        return self._experimental

    @experimental.setter
    def experimental(self, experimental):
        """Sets the experimental of this Manual.

        Allow setting experimental options  # noqa: E501

        :param experimental: The experimental of this Manual.  # noqa: E501
        :type: bool
        """

        self._experimental = experimental

    @property
    def deprecated(self):
        """Gets the deprecated of this Manual.  # noqa: E501

        Allow setting deprecated options  # noqa: E501

        :return: The deprecated of this Manual.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Manual.

        Allow setting deprecated options  # noqa: E501

        :param deprecated: The deprecated of this Manual.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def metadata(self):
        """Gets the metadata of this Manual.  # noqa: E501

        Set Volume Metadata  # noqa: E501

        :return: The metadata of this Manual.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Manual.

        Set Volume Metadata  # noqa: E501

        :param metadata: The metadata of this Manual.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def flags(self):
        """Gets the flags of this Manual.  # noqa: E501

        Set Flags  # noqa: E501

        :return: The flags of this Manual.  # noqa: E501
        :rtype: object
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Manual.

        Set Flags  # noqa: E501

        :param flags: The flags of this Manual.  # noqa: E501
        :type: object
        """

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Manual):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
