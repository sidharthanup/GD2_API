# coding: utf-8

"""
    Gluster Management API

    Gluster Management APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BrickHeal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_id': 'str',
        'name': 'str',
        'status': 'str',
        'total_entries': 'str',
        'entries_in_heal_pending': 'int',
        'entries_in_split_brain': 'int',
        'entries_possibly_healing': 'int',
        'entries': 'int',
        'file_gfid': 'list[FileGfid]'
    }

    attribute_map = {
        'host_id': 'host-id',
        'name': 'name',
        'status': 'status',
        'total_entries': 'total-entries',
        'entries_in_heal_pending': 'entries-in-heal-pending',
        'entries_in_split_brain': 'entries-in-split-brain',
        'entries_possibly_healing': 'entries-possibly-healing',
        'entries': 'entries',
        'file_gfid': 'file-gfid'
    }

    def __init__(self, host_id=None, name=None, status=None, total_entries=None, entries_in_heal_pending=None, entries_in_split_brain=None, entries_possibly_healing=None, entries=None, file_gfid=None):  # noqa: E501
        """BrickHeal - a model defined in OpenAPI"""  # noqa: E501

        self._host_id = None
        self._name = None
        self._status = None
        self._total_entries = None
        self._entries_in_heal_pending = None
        self._entries_in_split_brain = None
        self._entries_possibly_healing = None
        self._entries = None
        self._file_gfid = None
        self.discriminator = None

        if host_id is not None:
            self.host_id = host_id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if total_entries is not None:
            self.total_entries = total_entries
        if entries_in_heal_pending is not None:
            self.entries_in_heal_pending = entries_in_heal_pending
        if entries_in_split_brain is not None:
            self.entries_in_split_brain = entries_in_split_brain
        if entries_possibly_healing is not None:
            self.entries_possibly_healing = entries_possibly_healing
        if entries is not None:
            self.entries = entries
        if file_gfid is not None:
            self.file_gfid = file_gfid

    @property
    def host_id(self):
        """Gets the host_id of this BrickHeal.  # noqa: E501


        :return: The host_id of this BrickHeal.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this BrickHeal.


        :param host_id: The host_id of this BrickHeal.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def name(self):
        """Gets the name of this BrickHeal.  # noqa: E501


        :return: The name of this BrickHeal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrickHeal.


        :param name: The name of this BrickHeal.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this BrickHeal.  # noqa: E501


        :return: The status of this BrickHeal.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BrickHeal.


        :param status: The status of this BrickHeal.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_entries(self):
        """Gets the total_entries of this BrickHeal.  # noqa: E501


        :return: The total_entries of this BrickHeal.  # noqa: E501
        :rtype: str
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this BrickHeal.


        :param total_entries: The total_entries of this BrickHeal.  # noqa: E501
        :type: str
        """

        self._total_entries = total_entries

    @property
    def entries_in_heal_pending(self):
        """Gets the entries_in_heal_pending of this BrickHeal.  # noqa: E501


        :return: The entries_in_heal_pending of this BrickHeal.  # noqa: E501
        :rtype: int
        """
        return self._entries_in_heal_pending

    @entries_in_heal_pending.setter
    def entries_in_heal_pending(self, entries_in_heal_pending):
        """Sets the entries_in_heal_pending of this BrickHeal.


        :param entries_in_heal_pending: The entries_in_heal_pending of this BrickHeal.  # noqa: E501
        :type: int
        """

        self._entries_in_heal_pending = entries_in_heal_pending

    @property
    def entries_in_split_brain(self):
        """Gets the entries_in_split_brain of this BrickHeal.  # noqa: E501


        :return: The entries_in_split_brain of this BrickHeal.  # noqa: E501
        :rtype: int
        """
        return self._entries_in_split_brain

    @entries_in_split_brain.setter
    def entries_in_split_brain(self, entries_in_split_brain):
        """Sets the entries_in_split_brain of this BrickHeal.


        :param entries_in_split_brain: The entries_in_split_brain of this BrickHeal.  # noqa: E501
        :type: int
        """

        self._entries_in_split_brain = entries_in_split_brain

    @property
    def entries_possibly_healing(self):
        """Gets the entries_possibly_healing of this BrickHeal.  # noqa: E501


        :return: The entries_possibly_healing of this BrickHeal.  # noqa: E501
        :rtype: int
        """
        return self._entries_possibly_healing

    @entries_possibly_healing.setter
    def entries_possibly_healing(self, entries_possibly_healing):
        """Sets the entries_possibly_healing of this BrickHeal.


        :param entries_possibly_healing: The entries_possibly_healing of this BrickHeal.  # noqa: E501
        :type: int
        """

        self._entries_possibly_healing = entries_possibly_healing

    @property
    def entries(self):
        """Gets the entries of this BrickHeal.  # noqa: E501


        :return: The entries of this BrickHeal.  # noqa: E501
        :rtype: int
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this BrickHeal.


        :param entries: The entries of this BrickHeal.  # noqa: E501
        :type: int
        """

        self._entries = entries

    @property
    def file_gfid(self):
        """Gets the file_gfid of this BrickHeal.  # noqa: E501


        :return: The file_gfid of this BrickHeal.  # noqa: E501
        :rtype: list[FileGfid]
        """
        return self._file_gfid

    @file_gfid.setter
    def file_gfid(self, file_gfid):
        """Sets the file_gfid of this BrickHeal.


        :param file_gfid: The file_gfid of this BrickHeal.  # noqa: E501
        :type: list[FileGfid]
        """

        self._file_gfid = file_gfid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrickHeal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
